{"version":3,"sources":["useHooks/useAvatarHide.ts","components/AppHeader/index.tsx","useHooks/useScroll.ts","components/PageBackGround/index.tsx","components/MarckonAvatar/index.tsx","components/ParallaxBG/index.tsx","components/PersonalCard/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["subject","Subject","useAvatarHide","useState","state","setState","subscribe","next","isHide","setHide","useStyles","makeStyles","theme","createStyles","mainTransParent","position","top","backgroundColor","color","boxShadow","btnGroup","display","flexGrow","justifyContent","AppHeader","classes","console","log","AppBar","className","Toolbar","Typography","variant","IconButton","style","useScroll","element","windowTop","windowLeft","setPosition","useEffect","scrollCb","e","window","scrollY","scrollX","elementTop","getBoundingClientRect","undefined","elementLeft","left","document","addEventListener","removeEventListener","pageBackGround","height","overflow","zIndex","backgroundImage","backgroundSize","backgroundPosition","PageBackGround","positions","transform","avatar","width","maxWidth","maxHeight","minHeight","minWidth","borderRadius","MarckonAvatar","props","avatarDOM","useRef","current","ref","src","ParallaxBG","sceneRef","Parallax","data-depth","personalCard","margin","PersonalCard","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.411dc17d.chunk.js","sourcesContent":["import { useState } from 'react';\nimport { Subject } from 'rxjs';\n\nconst subject = new Subject<boolean>();\n\nexport const useAvatarHide = (): { isHide: boolean; setHide: (isHide: boolean) => void } => {\n  const [state, setState] = useState(false);\n\n  subject.subscribe({\n    next: (isHide: boolean) => {\n      setState(isHide);\n    },\n  });\n\n  return {\n    isHide: state,\n    setHide: isHide => subject.next(isHide),\n  };\n};\n","import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport EmailIcon from '@material-ui/icons/Email';\nimport { useAvatarHide } from '../../useHooks/useAvatarHide';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    mainTransParent: {\n      position: 'fixed',\n      top: 0,\n      backgroundColor: 'rgba(0,0,0,0.65)',\n      color: '#fff',\n      boxShadow: 'none',\n    },\n    btnGroup: {\n      display: 'flex',\n      flexGrow: 1,\n      justifyContent: 'flex-end',\n    },\n  })\n);\n\nexport const AppHeader: React.FC = () => {\n  const classes = useStyles();\n  const { isHide } = useAvatarHide();\n  console.log('rxHide:', isHide);\n\n  return (\n    <AppBar position=\"static\" className={classes.mainTransParent}>\n      <Toolbar>\n        <Typography variant=\"h6\">Marckon</Typography>\n        <div className={classes.btnGroup}>\n          <IconButton>\n            <GitHubIcon style={{ color: '#fff' }} />\n          </IconButton>\n          <IconButton>\n            <EmailIcon style={{ color: '#fff' }} />\n          </IconButton>\n        </div>\n      </Toolbar>\n    </AppBar>\n  );\n};\n","import { useEffect, useState } from 'react';\n\ninterface UseScrollState {\n  /* 窗口scroll bar的位置 */\n  windowTop: number;\n  windowLeft: number;\n  /* 传入的element scroll 位置 */\n  elementTop?: number;\n  elementLeft?: number;\n}\n\n/* 获取scroll的位置 */\nexport function useScroll(element?: HTMLElement): UseScrollState {\n  const [position, setPosition] = useState<UseScrollState>({\n    windowTop: 0,\n    windowLeft: 0,\n  });\n\n  useEffect(() => {\n    function scrollCb(e: Event) {\n      setPosition({\n        windowTop: window.scrollY,\n        windowLeft: window.scrollX,\n        elementTop: element ? element.getBoundingClientRect().top : undefined,\n        elementLeft: element ? element.getBoundingClientRect().left : undefined,\n      });\n    }\n\n    document.addEventListener('scroll', scrollCb);\n\n    return () => {\n      document.removeEventListener('scroll', scrollCb);\n    };\n  }, [element]);\n\n  return position;\n}\n","import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport { useScroll } from '../../useHooks/useScroll';\n\nconst bannerUrl =\n  'https://cn.bing.com/th?id=OHR.ValleyForge_ZH-CN8129420249_768x1024.jpg&rf=LaDigue_1920x1080.jpg&pid=hp';\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    pageBackGround: {\n      height: '50vh',\n      overflow: 'hidden',\n      zIndex: -1,\n      backgroundImage: `url(${bannerUrl})`,\n      backgroundSize: 'cover',\n      backgroundPosition: 'center',\n    },\n  })\n);\n\nexport const PageBackGround = () => {\n  const classes = useStyles();\n  const positions = useScroll();\n\n  return (\n    <div\n      className={classes.pageBackGround}\n      style={{ transform: `translate3d(0px, ${-positions.windowTop * 0.5}px, 0px)` }}\n    />\n  );\n};\n","import React, { useRef } from 'react';\nimport { useScroll } from '../../useHooks/useScroll';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport { useAvatarHide } from '../../useHooks/useAvatarHide';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    avatar: {\n      width: '30vw',\n      height: '30vw',\n      maxWidth: '160px',\n      maxHeight: '160px',\n      minHeight: '80px',\n      minWidth: '80px',\n      boxShadow: '0 0 30px rgba(0,0,0,0.65)',\n      borderRadius: '100%',\n      backgroundColor: '#fff',\n      overflow: 'hidden',\n    },\n  })\n);\n\ninterface MarckonAvatarProps {\n  className: string;\n}\n\nexport const MarckonAvatar = (props: MarckonAvatarProps) => {\n  const avatarDOM = useRef(null);\n  const position = useScroll(avatarDOM.current || undefined);\n  const classes = useStyles();\n  const { isHide, setHide } = useAvatarHide();\n\n  /* 滚动到64px（header高度）设置隐藏 */\n  if (position.elementTop && position.elementTop <= 64 && !isHide) {\n    setHide(true);\n  }\n\n  if (position.elementTop && position.elementTop > 64 && isHide) {\n    setHide(false);\n  }\n  return (\n    <div className={`${classes.avatar} ${props.className}`} ref={avatarDOM}>\n      <img src=\"https://avatars0.githubusercontent.com/u/24504081?s=460&v=4\" width=\"100%\" />\n    </div>\n  );\n};\n","import React, { useEffect, useRef } from 'react';\nimport Parallax from 'parallax-js';\n\nexport const ParallaxBG = () => {\n  const sceneRef = useRef(null);\n\n  useEffect(() => {\n    if (!sceneRef.current) return;\n    console.log(sceneRef.current)\n    const parallaxInstance = new Parallax(sceneRef.current);\n  }, [sceneRef.current]);\n\n  return (\n    <div ref={sceneRef}>\n      <div data-depth=\"0.2\">My first Layer!</div>\n      <div data-depth=\"0.6\">My second Layer!</div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles';\nimport { MarckonAvatar } from '../MarckonAvatar';\nimport { ParallaxBG } from '../ParallaxBG';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    personalCard: {\n      width: '90vw',\n      height: '50vh',\n      margin: '-15vh 5vw 0 5vw',\n      backgroundColor: '#fff',\n      borderRadius: '5vw',\n      position: 'relative',\n      boxShadow:\n        '0 16px 24px 2px rgba(0, 0, 0, 0.14), 0 6px 30px 5px rgba(0, 0, 0, 0.12), 0 8px 10px -5px rgba(0, 0, 0, 0.2);',\n    },\n    avatar: {\n      position: 'absolute',\n      left: '50%',\n      top: 0,\n      transform: 'translate(-50%, -50%)',\n    },\n  })\n);\n\nexport const PersonalCard = () => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.personalCard}>\n      <MarckonAvatar className={classes.avatar} />\n      <ParallaxBG />\n    </div>\n  );\n};\n","import React from 'react';\nimport { AppHeader } from './components/AppHeader';\nimport { PageBackGround } from './components/PageBackGround';\nimport { PersonalCard } from './components/PersonalCard';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <AppHeader />\n      <PageBackGround />\n      <PersonalCard />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}